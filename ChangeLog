2008-11-14  Guillaume SADEGH  <sadegh@lrde.epita.fr>
	* README: Add the README.
	* AUTHORS: Edit the AUTHORS.

2008-11-14  Guillaume SADEGH  <sadegh@lrde.epita.fr>

	* gs/junction_all.h (All), gs/junction_any.h (Any),
	gs/junction_none.h (None), gs/junction_one.h (One),
	gs/junction.h: Add a copy constructor and operator=.
	* cpp/*: Move to root directory.

2008-11-12  Guillaume SADEGH  <sadegh@lrde.epita.fr>
	Comparaison can be done between Junction<Type> with another type
	(AnotherType), when AnotherType has the expected operator.
	Comparaison is not done in the written order (Type operator
	AnotherType), but is inverted (AnotherType operator Type).
	So :
	Junction<Type> == AnothereType requires AnotherType to implement
	operator ==
	Junction<Type> != AnothereType requires AnotherType to implement
	operator !=
	Junction<Type> <  AnothereType requires AnotherType to implement
	operator >=
	Junction<Type> <= AnothereType requires AnotherType to implement
	operator >
	Junction<Type> >  AnothereType requires AnotherType to implement
	operator <=
	Junction<Type> >= AnothereType requires AnotherType to implement
	operator <
	* gs/internal.h: New. Reimplement predicates on two types.
	* test/some_test.cc: New tests between junctions.
	* test/test_all.cc, test/Makefile: Update. New test All<int> compare with float.
	* gs/junction_all.h (AllCompare), gs/junction_any.h
	(AnyCompare), gs/junction_none.h (NoneCompare),
	gs/junction_one.h (OneCompare): Predicate on two differents types, and
	arguments (Type, CompareType) reversed to (CompareType, Type).
	* gs/junction.h: Update the _Compare template prototype.

2008-11-10  Guillaume SADEGH  <sadegh@lrde.epita.fr>

	* junction_all.h, junction_any.h, junction_none.h,
	junction_one.h: New interface added, with macros.
	* tests/test_all4.cc, tests/test_any4.cc, tests/test_none4.cc,
	tests/test_one4.cc: Add tests for this new interface.
	* tests/Makefile: Update Makefile.

2008-11-10  Guillaume SADEGH  <sadegh@lrde.epita.fr>
	* junction_all.h, junction_any.h, junction.h, junction_none.h,
	junction_one.h: Move this files ...
	* gs/junction_all.h, gs/junction_any.h, gs/junction.h,
	gs/junction_none.h, gs/junction_one.h: ... here.
	* tests/test_all2.cc, tests/test_all3.cc, tests/test_all.cc,
	tests/test_any2.cc, tests/test_any3.cc, tests/test_any.cc,
	tests/test_none2.cc, tests/test_none3.cc, tests/test_none.cc,
	tests/test_one2.cc, tests/test_one3.cc, tests/test_one.cc:
	Change #include.

2008-11-10  Guillaume SADEGH  <sadegh@lrde.epita.fr>

	* tests/test_any.cc, tests/test_any2.cc, tests/test_any3.cc:
	New. Test set for the any operator with 3 syntaxes.
	* tests/test_none.cc, tests/test_none2.cc, tests/test_none3.cc:
	New. Test set for the none operator with 3 syntaxes.
	* tests/test_one.cc, tests/test_one2.cc, tests/test_one3.cc:
	New. Test set for the one operator with 3 syntaxes.
	* tests/test.sh: Script to test if all tests passes.
	* junction_all.h: New. All operator now in this file.
	* junction_any.h: New. Any operator.
	* junction_none.h: New. None operator.
	* junction_one.h: New. One operator.
	* junction.h (JUNCTION_INHIB_0X_WARNING): Defined after one
	warm. So the warning has effect only once. Remove All operator
	from this file.


2008-11-09  Guillaume SADEGH  <sadegh@lrde.epita.fr>

	First draft with the All. Three notations : Class, function,
	variadic template function.
	* junction.h: New. Core library.
	* tests/test_all.cc: Tests on the `All' junction form. Class notation.
	* tests/test_all2.cc: Tests on the `All' junction form. Function notation.
	* tests/test_all3.cc: Tests on the `All' junction form. Variadic
	template function notation (need a compiler supporting c++0x
 	(like g++4.3.x)).
	* tests/Makefile: For tests.
